<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<xs:schema
  version="1.0"
  elementFormDefault="qualified"
  targetNamespace="urn:vpro:media:update:2009"
  xmlns="urn:vpro:media:update:2009"
  xmlns:media="urn:vpro:media:2009"
  xmlns:shared="urn:vpro:shared:2009"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
>
  <xs:import namespace="urn:vpro:media:2009" schemaLocation="../vproMedia.xsd"/>

  <xs:import namespace="urn:vpro:shared:2009" schemaLocation="../vproShared.xsd"/>

  <xs:element name="group" type="groupUpdateType"/>

  <xs:element name="program" type="programUpdateType"/>

  <xs:element name="segment" type="segmentUpdateType"/>

  <xs:element name="midAndType" type="midAndTypeType"/>

  <xs:element name="image" type="imageUpdateType"/>

  <xs:element name="prediction" type="predictionUpdateType"/>

  <xs:element name="location" type="locationUpdateType"/>

  <xs:element name="memberRef" type="memberRefUpdateType"/>

  <xs:element name="memberUpdate" type="memberUpdateType"/>

  <xs:element name="move" type="moveActionType"/>

  <xs:element name="transcode" type="transcodeType"/>

  <xs:element name="transcodeStatus" type="transcodeStatusType"/>

  <xs:element name="itemize" type="itemizeType"/>

  <xs:element name="liveitemize" type="liveItemize"/>

  <xs:element name="itemizeResponse" type="itemizeResponseType"/>

  <xs:element name="uploadResponse" type="uploadResponseType"/>

  <xs:complexType name="avAtributeUpdateType">
    <xs:sequence>
      <xs:element name="bitrate" type="xs:int" form="qualified" minOccurs="0"/>
      <xs:element name="byteSize" type="xs:long" form="qualified" minOccurs="0"/>
      <xs:element name="avFileFormat" type="media:avFileFormatEnum" form="qualified" minOccurs="0"/>
      <xs:element name="videoAttributes" type="videoAttributesUpdateType" form="qualified" minOccurs="0"/>
      <xs:element name="audioAttributes" type="audioAttributesUpdateType" form="qualified" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="videoAttributesUpdateType">
    <xs:sequence>
      <xs:element name="aspectRatio" type="media:aspectRatioEnum" form="qualified" minOccurs="0"/>
      <xs:element name="color" type="media:colorType" form="qualified" minOccurs="0"/>
      <xs:element name="coding" type="media:baseTextType" form="qualified" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="width" type="xs:int"/>
    <xs:attribute name="height" type="xs:int"/>
  </xs:complexType>

  <xs:complexType name="audioAttributesUpdateType">
    <xs:sequence>
      <xs:element name="channels" type="xs:int" form="qualified" minOccurs="0"/>
      <xs:element name="coding" type="media:baseTextType" form="qualified" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="descriptionUpdateType">
    <xs:simpleContent>
      <xs:extension base="media:unboundedTextType">
        <xs:attribute name="type" type="media:textualTypeEnum" use="required"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:simpleType name="tagUpdateType">
    <xs:restriction base="media:baseTextType"/>
  </xs:simpleType>

  <xs:simpleType name="genreUpdateType">
    <xs:restriction base="media:genreIdType"/>
  </xs:simpleType>

  <xs:complexType name="geoLocationsUpdateType">
    <xs:sequence>
      <xs:element name="geoLocation" type="geoLocationUpdateType" form="qualified" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="geoLocationUpdateType">
    <xs:attribute name="gtaaUri" type="xs:string"/>
    <xs:attribute name="role" type="media:geoRoleType"/>
  </xs:complexType>

  <xs:complexType name="topicUpdateType">
    <xs:attribute name="gtaaUri" type="xs:string" use="required"/>
  </xs:complexType>

  <xs:complexType name="topicsUpdateType">
    <xs:sequence>
      <xs:element name="topic" type="topicUpdateType" form="qualified" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="personUpdateType">
    <xs:sequence>
      <xs:element type="xs:string" name="givenName" form="qualified" minOccurs="0"/>
      <xs:element type="xs:string" name="familyName" form="qualified" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="gtaaUri" type="xs:string"/>
    <xs:attribute type="media:roleType" name="role" use="required"/>
  </xs:complexType>

  <xs:complexType name="nameUpdateType">
    <xs:attribute name="gtaaUri" type="xs:string" use="required"/>
    <xs:attribute type="media:roleType" name="role" use="required"/>
  </xs:complexType>

  <xs:complexType name="creditsUpdateType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element type="personUpdateType" name="person" form="qualified"/>
        <xs:element type="nameUpdateType" name="name" form="qualified"/>
      </xs:choice>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="groupUpdateType" final="extension restriction">
    <xs:complexContent>
      <xs:extension base="mediaUpdateType">
        <xs:sequence>
          <xs:element name="poSeriesID" type="media:baseTextType" form="qualified" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="type" type="media:groupTypeEnum" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="mediaUpdateType" abstract="true">
    <xs:sequence>
      <xs:element name="crid" type="media:cridType" form="qualified" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="broadcaster" type="media:organizationIdType" form="qualified" maxOccurs="unbounded"/>
      <xs:element name="portal" type="media:organizationIdType" form="qualified" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="exclusive" type="portalRestrictionUpdateType" form="qualified" minOccurs="0"
                  maxOccurs="unbounded"/>
      <xs:element name="region" type="geoRestrictionUpdateType" form="qualified" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="title" type="titleUpdateType" form="qualified" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            Titles in dutch
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="description" type="descriptionUpdateType" form="qualified" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            Descriptions in dutch
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="tag" type="tagUpdateType" form="qualified" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="country" type="xs:string" form="qualified" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            Countries somehow associated with this item. This does not refer to the used language in the meta fields of
            this object. Only supported if version &gt;= 5.0.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="language" type="xs:string" form="qualified" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            Languages somehow associated with this item. This does not refer to the used language in the meta fields of this object. They should be in dutch. Only supported if version &gt;= 5.0.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="genre" type="genreUpdateType" form="qualified" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="intentions" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="intention" type="media:intentionEnum" minOccurs="0" maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="targetGroups" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="targetGroup" type="media:targetGroupEnum" minOccurs="0" maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="geoLocations" type="geoLocationsUpdateType" form="qualified" minOccurs="0"/>
      <xs:element name="topics" type="topicsUpdateType" form="qualified" minOccurs="0"/>
      <xs:element name="avAttributes" type="avAtributeUpdateType" form="qualified" minOccurs="0"/>
      <xs:element name="releaseYear" type="xs:short" form="qualified" minOccurs="0"/>
      <xs:element name="duration" type="xs:duration" form="qualified" minOccurs="0"/>
      <xs:element name="credits" type="creditsUpdateType" form="qualified" minOccurs="0" maxOccurs="1"/>
      <xs:element name="memberOf" type="memberRefUpdateType" form="qualified" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element type="media:ageRatingType" name="ageRating" minOccurs="0" form="qualified"/>
      <xs:element type="media:contentRatingType" name="contentRating" minOccurs="0" maxOccurs="unbounded"
                  form="qualified"/>
      <xs:element name="email" type="media:baseTextType" form="qualified" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="website" type="media:websiteType" form="qualified" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="twitterref" type="twitterrefType" form="qualified" maxOccurs="unbounded" minOccurs="0">
         <xs:annotation>
          <xs:documentation>
            Only supported if version &gt;= 5.10.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="prediction" type="predictionUpdateType" form="qualified" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>
            With predictions it can be indicated for which platforms locations will be available.
            If there is a prediction for a certain platform, but the mediaobject is not yet available on the streaming platform, then
            there will be no associated location for that certain platform.

            If the streaming platform status changes, then according to these 'prediction' records the locations will be changed.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element form="qualified" name="locations" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="location" type="locationUpdateType" form="qualified" maxOccurs="unbounded" minOccurs="0"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element form="qualified" name="scheduleEvents" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Please note that this is only available for program upates (since 5.11)</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="scheduleEvent" type="scheduleEventUpdateType" form="qualified" maxOccurs="unbounded"
                        minOccurs="0"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="relation" type="relationUpdateType" form="qualified" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element form="qualified" name="images" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="image" type="imageUpdateType" form="qualified" maxOccurs="unbounded" minOccurs="0"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="asset" type="assetType" form="qualified" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="avType" type="media:avTypeEnum" use="required"/>
    <xs:attribute name="deleted" type="xs:boolean" use="optional"/>
    <xs:attribute type="xs:boolean" name="embeddable" use="optional" default="true"/>
    <xs:attribute name="publishStart" type="xs:dateTime"/>
    <xs:attribute name="publishStop" type="xs:dateTime"/>
    <xs:attribute name="mid" type="media:midType"/>
    <xs:attribute name="urn" type="xs:anyURI"/>
    <xs:attribute name="ordered" type="xs:boolean"/>
    <xs:attribute name="version" type="versionType">
      <xs:annotation>
        <xs:documentation>
          <xs:paragraphs>
            The POMS version this XML applies too. This is optional, though some features will only be supported if you explicitly specify a version which is big enough (To ensure backward compatibility). If you don't specify it,  there will be no backwards compatibility.

          </xs:paragraphs>

        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="bulkUpdateType">
    <xs:sequence>
      <xs:element type="titleUpdateType" name="titles" form="qualified"/>
      <xs:element type="descriptionUpdateType" name="descriptions" form="qualified"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="midAndTypeType">
    <xs:sequence>
      <xs:element name="crid" type="media:cridType" form="qualified" maxOccurs="unbounded" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="mid" type="xs:string"/>
    <xs:attribute name="id" type="xs:long"/>
    <xs:attribute name="type" type="media:mediaTypeEnum"/>
  </xs:complexType>

  <xs:complexType name="portalRestrictionUpdateType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attributeGroup ref="media:restrictionAttributesGroup"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="geoRestrictionUpdateType">
    <xs:simpleContent>
      <xs:extension base="media:geoRestrictionEnum">
        <xs:attributeGroup ref="media:restrictionAttributesGroup"/>
        <xs:attribute name="platform" type="media:platformTypeEnum"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="titleUpdateType">
    <xs:simpleContent>
      <xs:extension base="media:baseTextType">
        <xs:attribute name="type" type="media:textualTypeEnum" use="required"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:simpleType name="mediaRefType">
    <xs:restriction base="xs:string">
      <xs:minLength value="4"/>
      <!-- <xs:pattern value="urn:vpro:media:(program|group|segment):(\d+)|crid://.*|.{10,32}"/>
      -->
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="memberRefUpdateType">
    <xs:simpleContent>
      <xs:extension base="mediaRefType">
        <xs:attribute name="position" type="xs:int"/>
        <xs:attribute name="highlighted" type="xs:boolean" default="false"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="locationUpdateType">
    <xs:sequence>
      <xs:element name="programUrl" type="xs:anyURI" form="qualified"/>
      <xs:element name="avAttributes" type="avAtributeUpdateType" form="qualified"/>
      <xs:element name="offset" type="xs:duration" form="qualified" minOccurs="0"/>
      <xs:element name="duration" type="xs:duration" form="qualified" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="publishStart" type="xs:dateTime"/>
    <xs:attribute name="publishStop" type="xs:dateTime"/>
    <xs:attribute name="urn" type="xs:anyURI"/>
    <xs:attribute name="delete" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>
          If true, the location will be marked deleted.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="scheduleEventUpdateType">
    <xs:sequence>
      <xs:element name="start" type="xs:dateTime" form="qualified"/>
      <xs:element name="guideDay" type="xs:date" minOccurs="0" form="qualified" />
      <xs:element name="duration" type="xs:duration" form="qualified"/>
      <xs:element name="repeat" type="repeatType" minOccurs="0"/>
      <xs:element name="titles" minOccurs="0" form="qualified">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="title" type="titleUpdateType" minOccurs="0" maxOccurs="unbounded" form="qualified"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="descriptions" minOccurs="0" form="qualified">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="description" type="descriptionUpdateType" minOccurs="0" maxOccurs="unbounded"
                        form="qualified"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="channel" type="media:channelEnum" use="required"/>
    <xs:attribute name="net" type="xs:string"/>
  </xs:complexType>

  <xs:complexType name="repeatType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="isRerun" type="xs:boolean" use="required"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="relationUpdateType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="type" type="media:relationTypeType" use="required"/>
        <xs:attribute name="broadcaster" type="media:baseTextType" use="required"/>
        <xs:attribute name="uriRef" type="xs:anyURI"/>
        <xs:attribute name="urn" type="xs:anyURI"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="imageUpdateType">
    <xs:sequence>
      <xs:element name="title" type="media:baseTextType" form="qualified"/>
      <xs:element name="description" type="xs:string" form="qualified" minOccurs="0"/>
      <xs:element name="source" type="xs:string" form="qualified"  minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            The source of the image. This is only metadata. It must be URL from where the image was originally acquired.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="sourceName" type="xs:string" form="qualified"  minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            A simple string representing the source of the image. E.g. 'flickr'.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="license" type="shared:licenseEnum" form="qualified"  minOccurs="0"/>
      <xs:element name="width" type="xs:int" form="qualified" minOccurs="0"/>
      <xs:element name="height" type="xs:int" form="qualified" minOccurs="0"/>
      <xs:element name="credits" type="xs:string" form="qualified" minOccurs="0"/>
      <xs:element name="date" type="xs:string" form="qualified" minOccurs="0"/>
      <xs:element name="offset" type="xs:duration" form="qualified" minOccurs="0"/>
      <xs:choice minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            Every image contain a presentation of the image itself.
          </xs:documentation>
        </xs:annotation>
        <xs:element name="imageData" type="imageDataType" form="qualified">
          <xs:annotation>
            <xs:documentation>
              The image as a base-64 encoded blob.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="imageLocation" type="imageLocationType" form="qualified">
          <xs:annotation>
            <xs:documentation>
              An URL from where the image can be downloaded from.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="urn" type="imageUrnType" form="qualified">
          <xs:annotation>
            <xs:documentation>
              The URN of an already existing image inside the POMS image server.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="type" type="shared:imageTypeEnum" use="required"/>
    <xs:attribute name="urn" type="xs:string"/>
    <xs:attribute name="publishStart" type="xs:dateTime"/>
    <xs:attribute name="publishStop" type="xs:dateTime"/>
    <xs:attribute name="highlighted" type="xs:boolean" default="false"/>
    <xs:attribute name="delete" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>
          If true, the image will be marked deleted.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="imageDataType">
    <xs:sequence>
      <xs:element name="data" mime:expectedContentTypes="application/octet-stream" type="xs:base64Binary"
                  form="qualified" minOccurs="0" xmlns:mime="http://www.w3.org/2005/05/xmlmime"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="imageLocationType">
    <xs:sequence>
      <xs:element name="mimeType" form="qualified" type="xs:string" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            Sometimes it may be usefull to explicitely specify the mimetype of the given location. (E.g. if there are no or no correct http content type headers).
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="url" type="imageLocationUrlType" form="qualified" minOccurs="0">
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:simpleType name="imageLocationUrlType">
    <xs:restriction base="xs:anyURI">
      <xs:maxLength value="1024"/>
      <xs:pattern value="[a-z][a-z]+:.*" />
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="imageUrnType">
    <xs:restriction base="xs:string">
      <xs:pattern value="urn:vpro[\.:]image:[0-9]+"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="assetType">
    <xs:choice>
      <xs:element name="assetData" type="assetDataType" form="qualified"/>
      <xs:element name="assetLocation" type="assetLocationType" form="qualified"/>
    </xs:choice>
    <xs:attribute name="publishStart" type="xs:dateTime"/>
    <xs:attribute name="publishStop" type="xs:dateTime"/>
  </xs:complexType>

  <xs:complexType name="assetDataType">
    <xs:sequence>
      <xs:element name="data" mime:expectedContentTypes="application/octet-stream" type="xs:base64Binary"
                  form="qualified" minOccurs="0" xmlns:mime="http://www.w3.org/2005/05/xmlmime"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="assetLocationType">
    <xs:sequence>
      <xs:element name="url" type="xs:anyURI" form="qualified" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="programUpdateType" final="extension restriction">
    <xs:complexContent>
      <xs:extension base="mediaUpdateType">
        <xs:sequence>
          <xs:element name="episodeOf" type="memberRefUpdateType" form="qualified" maxOccurs="unbounded" minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                episodeOf works similar to memberOf. Important differences: only programs of type CLIP or BROADCAST can
                be an episode of a group and the group can only be of type SERIES or SEASON.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element form="qualified" name="segments" minOccurs="0">
            <xs:annotation>
              <xs:documentation>
                Optional list of program segments. A segment is a part of a program that can be visually shown on the
                timeline of a player. A segment always has a start time indicating the start of the segment relative to
                the parent program. A segment can have the same fields as other media objects, like titles, descriptions,
                images, locations, etc.

                The standard scenario when playing a segment is to load a location of the parent media object and
                to use the start time as an offset to start playing the segment. However, it is also possible for a
                segment to have its own locations. This makes it possible to for instance have a podcast of a weekly
                segment in a radio show without providing the complete radio program it is a part of.

                Rules:
                - Start time is required
                - If duration is not set the player should play until the end of the program
                - Removing a program also deletes its segments
              </xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:sequence>
                <xs:element ref="segment" maxOccurs="unbounded" minOccurs="0"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="type" type="media:programTypeEnum" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="segmentUpdateType" final="extension restriction">
    <xs:complexContent>
      <xs:extension base="mediaUpdateType">
        <xs:sequence>
          <xs:element name="start" type="xs:duration" form="qualified"/>
        </xs:sequence>
        <xs:attribute name="midRef" type="xs:string"/>
        <xs:attribute name="type" type="media:segmentTypeEnum" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="memberUpdateType" final="extension restriction">
    <xs:sequence>
      <xs:any/>
      <!---
      <xs:element name="mediaUpdate" type="mediaUpdateType" minOccurs="0"/>
      -->
    </xs:sequence>
    <xs:attribute name="position" type="xs:integer"/>
    <xs:attribute name="highlighted" type="xs:boolean"/>
  </xs:complexType>

  <xs:element name="list">
    <xs:complexType>
      <xs:sequence>
        <xs:any/>
      </xs:sequence>
      <xs:attribute name="offset" type="xs:nonNegativeInteger"/>
      <xs:attribute name="totalCount" type="xs:nonNegativeInteger"/>
      <xs:attribute name="max" type="xs:nonNegativeInteger"/>
      <xs:attribute name="size" type="xs:nonNegativeInteger"/>
      <xs:attribute name="order">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="ASC"/>
            <xs:enumeration value="DESC"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>

  <xs:complexType name="moveActionType">
    <xs:sequence>
      <xs:element name="from" type="xs:string" minOccurs="1" form="qualified"/>
      <xs:element name="to" type="xs:string" minOccurs="1" form="qualified"/>
    </xs:sequence>
    <xs:attribute name="type" type="moveActionTypeType"/>
  </xs:complexType>

  <xs:simpleType name="moveActionTypeType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="REFERENCE">
        <xs:annotation>
          <xs:documentation>
            'from' and 'to' refer to mediaobjects in the list by reference (e.g. mid).
          </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="NUMBER">
        <xs:annotation>
          <xs:documentation>
            Would refer to the number in the memberref object (presently unsupported)
          </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="INDEX">
        <xs:annotation>
            <xs:documentation>
              'from' and 'to' refer to the index (offset 0) of the mediaobject in the list.
            </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="predictionUpdateType">
    <xs:simpleContent>
      <xs:extension base="media:platformTypeEnum">
        <xs:attribute name="publishStart" type="xs:dateTime"/>
        <xs:attribute name="publishStop" type="xs:dateTime"/>
        <xs:attribute name="encryption" type="media:encryption"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="transcodeType">
    <xs:sequence>
      <xs:element name="fileName" type="xs:string"  form="qualified" minOccurs="0"/>
      <xs:element name="encryption" type="media:encryption"  form="qualified" minOccurs="0"/>
      <xs:element name="priority" type="priorityType"  form="qualified" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="mid" type="xs:string"/>
  </xs:complexType>

   <xs:complexType name="transcodeStatusType">
    <xs:sequence>
      <xs:element name="fileName" type="xs:string" form="qualified" minOccurs="0"/>
      <xs:element name="status" type="transcodeStatusEnum" form="qualified" minOccurs="0"/>
      <xs:element name="statusMessage" type="xs:string" form="qualified"  minOccurs="0"/>
      <xs:element name="workflowType" type="xs:string" form="qualified" minOccurs="0"/>
      <xs:element name="workflowId" type="xs:string" form="qualified" minOccurs="0"/>
      <xs:element name="startTime" type="xs:dateTime" form="qualified" minOccurs="0"/>
      <xs:element name="updateTime" type="xs:dateTime" form="qualified"  minOccurs="0"/>
      <xs:element name="endTime" type="xs:dateTime" form="qualified"  minOccurs="0"/>
       <xs:element name="broadcasters" minOccurs="0"  form="qualified">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="broadcaster" type="xs:string" form="qualified"  minOccurs="0" maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
     <xs:attribute name="mid" type="xs:string"/>
     <xs:attribute name="missingMedia" type="xs:boolean"/>
  </xs:complexType>

  <xs:simpleType name="priorityType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="LOW"/>
      <xs:enumeration value="NORMAL"/>
      <xs:enumeration value="HIGH"/>
      <xs:enumeration value="URGENT"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="transcodeStatusEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="RUNNING"/>
      <xs:enumeration value="COMPLETED"/>
      <xs:enumeration value="FAILED"/>
      <xs:enumeration value="TIMED_OUT"/>
      <xs:enumeration value="TERMINATED"/>
      <xs:enumeration value="PAUSED"/>
    </xs:restriction>
  </xs:simpleType>

   <xs:complexType name="itemizeType">
    <xs:sequence>
      <xs:element name="start" type="xs:duration" minOccurs="0"/>
      <xs:element name="stop" type="xs:duration"  form="qualified" />
    </xs:sequence>
    <xs:attribute name="mid" type="xs:string"/>
  </xs:complexType>

   <xs:complexType name="liveItemize">
    <xs:sequence>
      <xs:element name="start" type="xs:dateTime" minOccurs="0"/>
      <xs:element name="stop" type="xs:dateTime" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="stream" type="xs:string"/>
  </xs:complexType>

  <xs:complexType name="itemizeResponseType">
    <xs:sequence>
       <xs:choice minOccurs="0">
        <xs:element name="request" type="itemizeType"/>
        <xs:element name="liverequest" type="liveItemize"/>
      </xs:choice>
      <xs:element name="result"  type="xs:string" minOccurs="0" maxOccurs="unbounded" form="qualified" />

      <xs:element name="id" type="xs:string" minOccurs="0" form="qualified" />
    </xs:sequence>
    <xs:attribute name="success" type="xs:boolean" use="required"/>
  </xs:complexType>

  <xs:simpleType name="twitterrefType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[@#][A-Za-z0-9_]{1,139}" />
      <xs:minLength value="2"/>
      <xs:maxLength value="16"/>
    </xs:restriction>
  </xs:simpleType>

   <xs:simpleType name="versionType">
    <xs:restriction base="xs:string">
      <xs:pattern value="[0-9]+(\.[0-9]+(\.[0-9]+)?)?" />
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="uploadResponseType">
    <xs:sequence>
      <xs:element name="status" type="xs:string" minOccurs="0"/>
      <xs:element name="response" type="xs:string" minOccurs="0"/>
      <xs:element name="bytes" type="xs:long" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="statusCode" type="xs:int" use="required"/>
    <xs:attribute name="mid" type="xs:string"/>
  </xs:complexType>


</xs:schema>
