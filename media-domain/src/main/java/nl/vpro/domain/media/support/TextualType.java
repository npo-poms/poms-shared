//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.0-b26-ea3
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2009.04.23 at 10:16:24 AM CEST
//


package nl.vpro.domain.media.support;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlType;

import nl.vpro.domain.Xmlns;


/**
 * Some textual values can have multiple types, and are stored in the same collection.
 * <p>
 * E.g. main titles, sub titles.
 * <p>
 *
 */
@XmlEnum
@XmlType(
    name = "textualTypeEnum",
    namespace = Xmlns.MEDIA_NAMESPACE
)
public enum TextualType {

    /**
     * The main text. For a {@link nl.vpro.domain.media.ProgramType#BROADCAST} this may be the title of the program (the title of the series?)
     */
    MAIN,

    /**
     * A long description
     */
    LONG,

    SHORT,
    /**
     * A sub text. This may be the descriptive title of a broadcast if it is an episode of a series.
     */
    SUB,

    /**
     * @deprecated  Use {@link #SUB}
     */
    @Deprecated
    EPISODE,
    /**
     * If the program was translated, this may contain one text in the original language.
     */
    ORIGINAL,
    KICKER,
    LEXICO,
    WORK,
    ABBREVIATION;

    private final boolean isDeprecated;

    TextualType() {
        boolean dep;
        try {
            dep = OwnerType.class.getField(name()).isAnnotationPresent(Deprecated.class);
        } catch (Exception e) {
            dep = false;
        }
        isDeprecated = dep;
    }

    public boolean isDeprecated() {
        return isDeprecated;
    }


    public String value() {
        return name();
    }

    public TextualType fromValue(String v) {
        return TextualType.valueOf(v);
    }

    /*
    mediadb=> select  type, count(*) from title group by type;
     type     |  count
--------------+---------
 ORIGINAL     |   75431
 WORK         |   29746
 ABBREVIATION |    1274
 MAIN         | 1618743
 SUB          |  348369
 SHORT        |   75888
 EPISODE      |   14142
 LEXICO       |   15203
(8 rows)

mediadb=> select  type, count(*) from description  group by type;
  type   | count
---------+--------
 MAIN    | 932845
 SHORT   | 496172
 EPISODE | 122727
 KICKER  |  97617
 SUB     |  65905
(5 rows)

     */
    public static final List<TextualType> TITLES = Collections.unmodifiableList(Arrays.asList(
        MAIN,
        SHORT,
        SUB,
        EPISODE,
        ORIGINAL,
        LEXICO,
        WORK,
        ABBREVIATION
    ));


    public static final List<TextualType> DESCRIPTIONS = Collections.unmodifiableList(Arrays.asList(
        MAIN,
        SHORT,
        EPISODE,
        KICKER,
        SUB
    ));



}
