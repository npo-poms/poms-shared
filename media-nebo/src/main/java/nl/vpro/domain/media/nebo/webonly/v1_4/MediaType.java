//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2012.06.07 at 01:34:11 PM CEST
//


package nl.vpro.domain.media.nebo.webonly.v1_4;

import jakarta.xml.bind.Unmarshaller;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlType;

import nl.vpro.domain.media.Program;
import nl.vpro.domain.media.nebo.shared.StreamsType;


/**
 * <p>Java class for mediaType complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType name="mediaType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="streams" type="{}streamsType" minOccurs="0"/>
 *         &lt;element name="nebo_icon" type="{}nebo_iconType" minOccurs="0"/>
 *         &lt;element name="icon" type="{}iconType" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 *
 *  @author Michiel Meeuwissen (wrapped Program)
 */
@XmlAccessorType(XmlAccessType.PROPERTY)
@XmlType(name = "mediaType", propOrder = {
        "streams",
        "neboIcon",
        "icon"
        })
public class MediaType {

    WebonlyType parent;
    StreamsType streams;
    IconType    icon;

    public MediaType(WebonlyType webonly) {
        this.parent = webonly;
        streams = new StreamsType(parent.program);
        Program program = parent.program;
        // <xs:element name="file" type="iconFileResType" minOccurs="1" maxOccurs="1" />
        // <xs:element name="titel" type="stringResType255" minOccurs="1" maxOccurs="1" /
        // elements listed above are mandatory... if URL not available, skip icon, if title not available,
        // program title is used instead
        if (program != null &&
            program.getImages() != null &&
            program.getImages().size() > 0) {

            icon = new IconType(program);
        }
    }

    public MediaType() {
    }

    public StreamsType getStreams() {
        if (streams != null && streams.getLocations() != null && streams.getLocations().size() > 0) {
            return streams; // at least one valid location
        }
        return null; // no valid locations, no streams
    }

    public void setStreams(StreamsType value) {
        this.streams = value;
    }


    @XmlElement(name = "nebo_icon")
    public NeboIconType getNeboIcon() {
        return null;
    }


    public void setNeboIcon(NeboIconType value) {
        throw new UnsupportedOperationException("nebo_icon not supported");
    }


    public IconType getIcon() {
        // <xs:element name="file" type="iconFileResType" minOccurs="1" maxOccurs="1" />
        // <xs:element name="titel" type="stringResType255" minOccurs="1" maxOccurs="1" /
        // elements listed above are mandatory... if URL not available, skip icon, if title not available,
        // program title is used instead
        return icon;
    }


    public void setIcon(IconType value) {
        this.icon = value;
    }


    void afterUnmarshal(Unmarshaller u, Object parent) {
        this.parent = (WebonlyType) parent;
    }
}
